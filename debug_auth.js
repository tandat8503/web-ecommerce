#!/usr/bin/env node
/**
 * Debug script ƒë·ªÉ ki·ªÉm tra authentication
 * Ch·∫°y: node debug_auth.js
 */

const jwt = require('jsonwebtoken');

// JWT config (gi·ªëng backend)
const JWT_CONFIG = {
  secret: process.env.JWT_SECRET || 'your-super-secret-key-change-in-production',
  expiresIn: '24h'
};

console.log('üîç DEBUG AUTHENTICATION');
console.log('=' * 50);

// Ki·ªÉm tra token t·ª´ localStorage (copy t·ª´ browser)
const token = process.argv[2];

if (!token) {
  console.log('‚ùå Vui l√≤ng cung c·∫•p token:');
  console.log('   node debug_auth.js YOUR_TOKEN_HERE');
  console.log('');
  console.log('üìã C√°ch l·∫•y token:');
  console.log('   1. M·ªü browser DevTools (F12)');
  console.log('   2. V√†o tab Application > Local Storage');
  console.log('   3. Copy gi√° tr·ªã c·ªßa key "token"');
  process.exit(1);
}

console.log('üîë Token:', token.substring(0, 20) + '...');
console.log('');

try {
  // Verify token
  const decoded = jwt.verify(token, JWT_CONFIG.secret);
  console.log('‚úÖ Token h·ª£p l·ªá!');
  console.log('üìä Decoded payload:', decoded);
  console.log('');
  
  // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n
  const now = Math.floor(Date.now() / 1000);
  const exp = decoded.exp;
  const timeLeft = exp - now;
  
  console.log('‚è∞ Th·ªùi gian h·∫øt h·∫°n:');
  console.log('   - Expires at:', new Date(exp * 1000).toLocaleString('vi-VN'));
  console.log('   - Time left:', Math.floor(timeLeft / 3600), 'hours');
  console.log('   - Is expired:', timeLeft < 0 ? 'YES' : 'NO');
  
} catch (error) {
  console.log('‚ùå Token kh√¥ng h·ª£p l·ªá!');
  console.log('üîç Error:', error.message);
  
  if (error.name === 'TokenExpiredError') {
    console.log('‚è∞ Token ƒë√£ h·∫øt h·∫°n');
  } else if (error.name === 'JsonWebTokenError') {
    console.log('üîê Token kh√¥ng ƒë√∫ng format');
  }
}

console.log('');
console.log('üöÄ ƒê·ªÉ test API:');
console.log('   curl -H "Authorization: Bearer ' + token + '" http://localhost:5000/api/admin/brands');
