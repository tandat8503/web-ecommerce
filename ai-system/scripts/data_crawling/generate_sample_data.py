#!/usr/bin/env python3
"""
Generate Sample Data - T·∫°o d·ªØ li·ªáu m·∫´u cho testing
"""

import pandas as pd
import os
from datetime import datetime
import random

def generate_sample_furniture_reviews():
    """T·∫°o d·ªØ li·ªáu m·∫´u reviews n·ªôi th·∫•t"""
    
    # D·ªØ li·ªáu m·∫´u positive
    positive_reviews = [
        "B√†n l√†m vi·ªác r·∫•t ƒë·∫πp, ch·∫•t l∆∞·ª£ng cao, giao h√†ng nhanh",
        "Gh·∫ø vƒÉn ph√≤ng tho·∫£i m√°i, ng·ªìi l√¢u kh√¥ng b·ªã m·ªèi",
        "T·ªß s√°ch ch·∫Øc ch·∫Øn, thi·∫øt k·∫ø ƒë·∫πp, ph√π h·ª£p v·ªõi kh√¥ng gian",
        "B√†n ƒÉn ƒë·∫πp, g·ªó t·ªët, gi√° c·∫£ h·ª£p l√Ω",
        "Sofa r·∫•t tho·∫£i m√°i, m√†u s·∫Øc ƒë·∫πp, ƒë√∫ng v·ªõi m√¥ t·∫£",
        "Gi∆∞·ªùng ch·∫Øc ch·∫Øn, ng·ªß ngon, ch·∫•t l∆∞·ª£ng t·ªët",
        "T·ªß qu·∫ßn √°o r·ªông r√£i, nhi·ªÅu ngƒÉn, ti·ªán l·ª£i",
        "K·ªá s√°ch ƒë·∫πp, d·ªÖ l·∫Øp r√°p, gi√° c·∫£ ph·∫£i chƒÉng",
        "B√†n h·ªçc ph√π h·ª£p cho tr·∫ª em, an to√†n, b·ªÅn",
        "Gh·∫ø xoay m∆∞·ª£t m√†, ƒëi·ªÅu ch·ªânh ƒë∆∞·ª£c ƒë·ªô cao",
        "S·∫£n ph·∫©m n·ªôi th·∫•t r·∫•t t·ªët, shop ph·ª•c v·ª• nhi·ªát t√¨nh",
        "Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m cao, ƒë√≥ng g√≥i c·∫©n th·∫≠n",
        "Giao h√†ng nhanh, s·∫£n ph·∫©m ƒë√∫ng nh∆∞ h√¨nh",
        "R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m, s·∫Ω mua l·∫°i",
        "Thi·∫øt k·∫ø ƒë·∫πp, ch·∫•t l∆∞·ª£ng t·ªët, gi√° c·∫£ h·ª£p l√Ω"
    ]
    
    # D·ªØ li·ªáu m·∫´u negative
    negative_reviews = [
        "B√†n l√†m vi·ªác kh√¥ng ch·∫Øc ch·∫Øn, g·ªó k√©m ch·∫•t l∆∞·ª£ng",
        "Gh·∫ø vƒÉn ph√≤ng kh√¥ng tho·∫£i m√°i, ng·ªìi l√¢u b·ªã ƒëau l∆∞ng",
        "T·ªß s√°ch d·ªÖ h·ªèng, thi·∫øt k·∫ø kh√¥ng ƒë·∫πp",
        "B√†n ƒÉn kh√¥ng ƒë√∫ng v·ªõi m√¥ t·∫£, g·ªó b·ªã n·ª©t",
        "Sofa kh√¥ng tho·∫£i m√°i, m√†u s·∫Øc kh√¥ng ƒë√∫ng",
        "Gi∆∞·ªùng kh√¥ng ch·∫Øc ch·∫Øn, ng·ªß kh√¥ng ngon",
        "T·ªß qu·∫ßn √°o nh·ªè, kh√¥ng ƒë·ªß ch·ªó",
        "K·ªá s√°ch kh√≥ l·∫Øp r√°p, h∆∞·ªõng d·∫´n kh√¥ng r√µ",
        "B√†n h·ªçc kh√¥ng an to√†n cho tr·∫ª em",
        "Gh·∫ø xoay b·ªã k·∫πt, kh√¥ng ƒëi·ªÅu ch·ªânh ƒë∆∞·ª£c",
        "S·∫£n ph·∫©m k√©m ch·∫•t l∆∞·ª£ng, shop ph·ª•c v·ª• t·ªá",
        "Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m k√©m, ƒë√≥ng g√≥i s∆° s√†i",
        "Giao h√†ng ch·∫≠m, s·∫£n ph·∫©m b·ªã h·ªèng",
        "Kh√¥ng h√†i l√≤ng v·ªõi s·∫£n ph·∫©m, kh√¥ng mua l·∫°i",
        "Thi·∫øt k·∫ø x·∫•u, ch·∫•t l∆∞·ª£ng k√©m, gi√° ƒë·∫Øt"
    ]
    
    # D·ªØ li·ªáu m·∫´u neutral
    neutral_reviews = [
        "B√†n l√†m vi·ªác b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát",
        "Gh·∫ø vƒÉn ph√≤ng ok, t·∫°m ƒë∆∞·ª£c",
        "T·ªß s√°ch b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ n·ªïi b·∫≠t",
        "B√†n ƒÉn ƒë√∫ng v·ªõi m√¥ t·∫£, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát",
        "Sofa b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ n·ªïi b·∫≠t",
        "Gi∆∞·ªùng ok, t·∫°m ƒë∆∞·ª£c",
        "T·ªß qu·∫ßn √°o b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát",
        "K·ªá s√°ch ok, t·∫°m ƒë∆∞·ª£c",
        "B√†n h·ªçc b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ n·ªïi b·∫≠t",
        "Gh·∫ø xoay ok, t·∫°m ƒë∆∞·ª£c",
        "S·∫£n ph·∫©m b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát",
        "Ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m b√¨nh th∆∞·ªùng",
        "Giao h√†ng ƒë√∫ng h·∫πn, s·∫£n ph·∫©m b√¨nh th∆∞·ªùng",
        "S·∫£n ph·∫©m ok, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát",
        "Thi·∫øt k·∫ø b√¨nh th∆∞·ªùng, ch·∫•t l∆∞·ª£ng ·ªïn"
    ]
    
    # T·∫°o d·ªØ li·ªáu
    data = []
    
    # Th√™m positive reviews
    for review in positive_reviews:
        data.append({
            'text': review,
            'processed_text': review,
            'sentiment': 'positive',
            'sentiment_label': 2,
            'rating': random.randint(4, 5),
            'author': f'User_{random.randint(1, 100)}',
            'product_name': random.choice(['B√†n l√†m vi·ªác', 'Gh·∫ø vƒÉn ph√≤ng', 'T·ªß s√°ch', 'B√†n ƒÉn', 'Sofa', 'Gi∆∞·ªùng', 'T·ªß qu·∫ßn √°o']),
            'source': 'sample_data',
            'url': f'https://example.com/product/{random.randint(1, 1000)}',
            'crawled_at': datetime.now().isoformat()
        })
    
    # Th√™m negative reviews
    for review in negative_reviews:
        data.append({
            'text': review,
            'processed_text': review,
            'sentiment': 'negative',
            'sentiment_label': 0,
            'rating': random.randint(1, 2),
            'author': f'User_{random.randint(1, 100)}',
            'product_name': random.choice(['B√†n l√†m vi·ªác', 'Gh·∫ø vƒÉn ph√≤ng', 'T·ªß s√°ch', 'B√†n ƒÉn', 'Sofa', 'Gi∆∞·ªùng', 'T·ªß qu·∫ßn √°o']),
            'source': 'sample_data',
            'url': f'https://example.com/product/{random.randint(1, 1000)}',
            'crawled_at': datetime.now().isoformat()
        })
    
    # Th√™m neutral reviews
    for review in neutral_reviews:
        data.append({
            'text': review,
            'processed_text': review,
            'sentiment': 'neutral',
            'sentiment_label': 1,
            'rating': 3,
            'author': f'User_{random.randint(1, 100)}',
            'product_name': random.choice(['B√†n l√†m vi·ªác', 'Gh·∫ø vƒÉn ph√≤ng', 'T·ªß s√°ch', 'B√†n ƒÉn', 'Sofa', 'Gi∆∞·ªùng', 'T·ªß qu·∫ßn √°o']),
            'source': 'sample_data',
            'url': f'https://example.com/product/{random.randint(1, 1000)}',
            'crawled_at': datetime.now().isoformat()
        })
    
    # T·∫°o DataFrame
    df = pd.DataFrame(data)
    
    # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
    os.makedirs('data', exist_ok=True)
    
    # L∆∞u CSV
    csv_path = 'data/crawled_reviews.csv'
    df.to_csv(csv_path, index=False, encoding='utf-8')
    
    print(f"‚úÖ Generated {len(df)} sample reviews")
    print(f"üìä Sentiment distribution:")
    print(f"  Positive: {len(df[df['sentiment'] == 'positive'])}")
    print(f"  Negative: {len(df[df['sentiment'] == 'negative'])}")
    print(f"  Neutral: {len(df[df['sentiment'] == 'neutral'])}")
    print(f"üíæ Saved to: {csv_path}")
    
    return csv_path

if __name__ == "__main__":
    generate_sample_furniture_reviews()
