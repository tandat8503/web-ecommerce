import { useEffect, useRef } from "react";
import useWishlistStore from "@/stores/wishlistStore";
import useCartStore from "@/stores/cartStore";

/**
 * üöÄ INIT USER DATA COMPONENT
 * 
 * Ch·ª©c nƒÉng:
 * - Fetch d·ªØ li·ªáu user khi app load (n·∫øu c√≥ token)
 * - T·ª± ƒë·ªông sync wishlist v√† cart t·ª´ server
 * - Ch·∫°y l·∫°i khi user ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n kh√°c
 * - Listen storage changes ƒë·ªÉ detect user switch
 * 
 * So v·ªõi Redux:
 * ‚úÖ Code ng·∫Øn h∆°n 70% (30 d√≤ng vs 100 d√≤ng)
 * ‚úÖ D·ªÖ hi·ªÉu h∆°n (kh√¥ng c·∫ßn Redux concepts)
 * ‚úÖ Kh√¥ng c·∫ßn Provider
 */

export default function InitUserData() {
  const { fetchWishlist } = useWishlistStore();
  const { fetchCart } = useCartStore();
  const isInitialized = useRef(false);

  // H√†m fetch d·ªØ li·ªáu user
  const initUserData = async () => {
    // Prevent duplicate initialization
    if (isInitialized.current) {
      console.log('üöÄ InitUserData - Already initialized, skipping...')
      return
    }
    
    const token = localStorage.getItem('token');
    
    if (!token) {
      // N·∫øu kh√¥ng c√≥ token ‚Üí reset state
      useWishlistStore.getState().resetWishlist();
      useCartStore.getState().resetCart();
      return;
    }

    try {
      isInitialized.current = true
      console.log('üöÄ InitUserData - Fetching user data...')
      
      // Fetch song song ƒë·ªÉ tƒÉng performance nh∆∞ng c√≥ delay nh·ªè
      await Promise.all([
        fetchWishlist(),
        new Promise(resolve => setTimeout(resolve, 100)), // Delay 100ms
        fetchCart()
      ]);
      
      console.log('üöÄ InitUserData - User data fetched successfully')
    } catch (error) {
      console.error('üöÄ InitUserData - Error initializing user data:', error);
      // Kh√¥ng reset state khi c√≥ l·ªói - gi·ªØ nguy√™n data hi·ªán t·∫°i
    }
  };

  useEffect(() => {
    // Fetch ngay khi component mount
    initUserData();
  }, []);

  // Component n√†y kh√¥ng render g√¨ c·∫£
  return null;
}