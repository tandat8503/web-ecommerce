import { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FaStar, FaCrown } from "react-icons/fa";
import ProductCard from "./ProductCard";
import { getProductsByCategory } from "../../api/adminProducts";
import { getPublicCategories } from "../../api/adminCategories";

/**
 * FeaturedProductsSection Component - Section s·∫£n ph·∫©m n·ªïi b·∫≠t cho trang ch·ªß
 * 
 * M·ª§C ƒê√çCH:
 * - Hi·ªÉn th·ªã s·∫£n ph·∫©m n·ªïi b·∫≠t tr√™n trang ch·ªß
 * - T√°i s·ª≠ d·ª•ng ProductCard ƒë√£ c√≥
 * - Layout compact ph√π h·ª£p v·ªõi trang ch·ªß
 * 
 * @param {Object} props - Props c·ªßa component
 * @param {number} [props.limit=6] - S·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªÉn th·ªã
 * @param {boolean} [props.showActions=true] - Hi·ªÉn th·ªã c√°c n√∫t action
 * @param {Function} [props.onAddToCart] - Callback khi click "Th√™m v√†o gi·ªè"
 * @param {Function} [props.onAddToWishlist] - Callback khi click "Y√™u th√≠ch"
 * @param {Function} [props.onQuickView] - Callback khi click "Xem nhanh"
 * @param {string} [props.className=""] - CSS class t√πy ch·ªânh
 * 
 * @returns {JSX.Element} Component FeaturedProductsSection
 */
const FeaturedProductsSection = ({ 
  limit = 6,
  showActions = true,
  onAddToCart,
  onAddToWishlist,
  onQuickView,
  className = ""
}) => {
  // ================================
  // STATE MANAGEMENT
  // ================================
  
  const [featuredProducts, setFeaturedProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // ================================
  // EFFECTS
  // ================================
  
  useEffect(() => {
    fetchFeaturedProducts();
  }, [limit]);

  // ================================
  // API FUNCTIONS
  // ================================
  
  const fetchFeaturedProducts = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log("‚≠ê B·∫Øt ƒë·∫ßu t·∫£i s·∫£n ph·∫©m n·ªïi b·∫≠t cho trang ch·ªß...");
      
      // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ c√°c danh m·ª•c
      const allProducts = [];
      
      // L·∫•y danh m·ª•c tr∆∞·ªõc
      const categoriesResponse = await getPublicCategories();
      const categories = categoriesResponse.data?.items || categoriesResponse.data || [];
      
      // L·∫•y s·∫£n ph·∫©m t·ª´ m·ªói danh m·ª•c
      for (const category of categories) {
        try {
          const productsResponse = await getProductsByCategory(category.id, {
            page: 1,
            limit: 10, // L·∫•y √≠t h∆°n v√¨ ch·ªâ c·∫ßn cho trang ch·ªß
            sortBy: 'createdAt',
            sortOrder: 'desc'
          });
          
          if (productsResponse.data?.success) {
            const products = productsResponse.data.data.products || [];
            allProducts.push(...products);
          }
        } catch (err) {
          console.error(`‚ùå L·ªói t·∫£i s·∫£n ph·∫©m cho danh m·ª•c ${category.name}:`, err);
        }
      }
      
      // L·ªçc s·∫£n ph·∫©m n·ªïi b·∫≠t (isFeatured = true)
      const featured = allProducts
        .filter(product => product.isFeatured === true)
        .slice(0, limit);
      
      console.log(`‚≠ê ƒê√£ t·∫£i ${featured.length} s·∫£n ph·∫©m n·ªïi b·∫≠t cho trang ch·ªß`);
      setFeaturedProducts(featured);
      
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i s·∫£n ph·∫©m n·ªïi b·∫≠t:", err);
      setError(`L·ªói t·∫£i d·ªØ li·ªáu: ${err.message || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
    } finally {
      setLoading(false);
    }
  };

  // ================================
  // HELPER FUNCTIONS
  // ================================
  
  // Default callbacks cho ProductCard
  const defaultCallbacks = {
    onAddToCart: (product) => console.log('üõí Th√™m v√†o gi·ªè:', product.name),
    onAddToWishlist: (product) => console.log('‚ù§Ô∏è Th√™m v√†o y√™u th√≠ch:', product.name),
    onQuickView: (product) => console.log('üëÅÔ∏è Xem nhanh:', product.name)
  };

  // ================================
  // LOADING & ERROR STATES
  // ================================
  
  if (loading) {
    return (
      <div className="py-16">
        <div className="flex justify-center items-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="py-16">
        <div className="text-center">
          <Card className="max-w-2xl mx-auto">
            <CardContent className="py-8">
              <FaStar className="text-6xl text-gray-300 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-4">
                Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m n·ªïi b·∫≠t
              </h2>
              <p className="text-gray-600 text-lg mb-6">
                C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.
              </p>
              <Button 
                onClick={() => {
                  setError(null);
                  fetchFeaturedProducts();
                }}
                className="px-8 py-3"
              >
                Th·ª≠ l·∫°i
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  // ================================
  // RENDER COMPONENTS
  // ================================
  
  const renderHeader = () => (
    <div className="text-center mb-12">
      <div className="inline-block">
        <div className="flex items-center justify-center gap-4 mb-4">
          <div className="p-3 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-full text-white shadow-lg">
            <FaCrown className="text-xl" />
          </div>
          <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-yellow-600 via-orange-600 to-red-600 bg-clip-text text-transparent">
            S·∫¢N PH·∫®M N·ªîI B·∫¨T
          </h2>
        </div>
        <div className="w-24 h-1 bg-gradient-to-r from-yellow-500 via-orange-500 to-red-500 mx-auto rounded-full mb-4"></div>
        <p className="text-gray-600 text-lg max-w-2xl mx-auto leading-relaxed">
          Nh·ªØng s·∫£n ph·∫©m ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t t·ª´ b·ªô s∆∞u t·∫≠p n·ªôi th·∫•t cao c·∫•p
        </p>
      </div>
    </div>
  );

  const renderProducts = () => {
    if (featuredProducts.length === 0) {
      return (
        <div className="text-center py-12">
          <Card className="max-w-md mx-auto">
            <CardContent className="py-6">
              <FaStar className="text-4xl text-gray-300 mx-auto mb-3" />
              <h3 className="text-lg font-semibold text-gray-500 mb-2">Ch∆∞a c√≥ s·∫£n ph·∫©m n·ªïi b·∫≠t</h3>
              <p className="text-gray-400">Hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† n·ªïi b·∫≠t</p>
            </CardContent>
          </Card>
        </div>
      );
    }

    return (
      <div 
        className="grid gap-6"
        style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(3, 1fr)', 
          gap: '1.5rem',
          gridAutoRows: 'auto'
        }}
      >
        {featuredProducts.map((product) => (
          <ProductCard 
            key={product.id}
            product={product} 
            showActions={showActions}
            onAddToCart={onAddToCart || defaultCallbacks.onAddToCart}
            onAddToWishlist={onAddToWishlist || defaultCallbacks.onAddToWishlist}
            onQuickView={onQuickView || defaultCallbacks.onQuickView}
          />
        ))}
      </div>
    );
  };

  return (
    <div className={`py-16 bg-white ${className}`}>
      <div className="max-w-7xl mx-auto px-4">
        {/* Header */}
        {renderHeader()}
        
        {/* S·∫£n ph·∫©m n·ªïi b·∫≠t */}
        {renderProducts()}
      </div>
    </div>
  );
};

export default FeaturedProductsSection;
