import { useState } from "react";
import { FaShoppingCart, FaSpinner } from "react-icons/fa";
import useCartStore from "@/stores/cartStore";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";

/**
 * üõí CART BUTTON COMPONENT   VI·∫æT T3
 * 
 * Ch·ª©c nƒÉng:
 * - Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng gi·ªè h√†ng
 * - Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
 * - Loading state khi ƒëang th√™m
 * - Toast notification
 * 
 * Props:
 * - productId: ID s·∫£n ph·∫©m
 * - variantId: ID variant (optional)
 * - quantity: S·ªë l∆∞·ª£ng (default: 1)
 * - size: K√≠ch th∆∞·ªõc button (sm, md, lg)
 * - className: CSS class
 * - showBadge: Hi·ªÉn th·ªã badge s·ªë l∆∞·ª£ng (default: true)
 * - onAddToCart: Callback khi th√™m th√†nh c√¥ng
 */

export default function CartButton({ 
  productId, 
  variantId = null, 
  quantity = 1, 
  size = "md", 
  className = "",  
  showBadge = true, 
  onAddToCart,
  disabled = false //disabled khi ƒëang loading
}) {
  const { addToCart, loading } = useCartStore();//k·∫øt n·ªëi v·ªõi store ƒë·ªÉ l·∫•y h√†m addToCart v√† loading
  
  const cartCount = useCartStore((state) => state.totalQuantity); //s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  const [isAdding, setIsAdding] = useState(false); //tr·∫°ng th√°i ƒëang th√™m v√†o gi·ªè h√†ng

  const handleAddToCart = async (e) => {
    e.preventDefault(); //ngƒÉn ch·∫∑n h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa button
    e.stopPropagation(); //ngƒÉn ch·∫∑n h√†nh vi lan truy·ªÅn c·ªßa button
    
    if (isAdding || loading) return; //n·∫øu ƒëang th√™m v√†o gi·ªè h√†ng ho·∫∑c ƒëang loading th√¨ kh√¥ng cho click
    
    try {
      setIsAdding(true); //set tr·∫°ng th√°i ƒëang th√™m v√†o gi·ªè h√†ng
      
      // G·ªçi Zustand action ƒë·ªÉ th√™m v√†o gi·ªè h√†ng
      //g·ªçi h√†m addToCart v·ªõi productId, variantId, quantity
      await addToCart({ 
        productId: Number(productId), 
        variantId: variantId ? Number(variantId) : null, 
        quantity: Number(quantity) 
      });
      
      // callback khi th√™m th√†nh c√¥ng
      if (onAddToCart) {
        onAddToCart({ productId, variantId, quantity }); //g·ªçi callback v·ªõi productId, variantId, quantity
      }
      
    } catch (error) {
      console.error('Add to cart failed:', error);
      
    } finally {
      setIsAdding(false); //set tr·∫°ng th√°i ƒëang th√™m v√†o gi·ªè h√†ng v·ªÅ false
    }
  };

  // Size variants
  const sizeClasses = {
    sm: "h-8 px-2 text-xs",//k√≠ch th∆∞·ªõc button sm
    md: "h-10 px-3 text-sm", //k√≠ch th∆∞·ªõc button md
    lg: "h-12 px-4 text-base"//k√≠ch th∆∞·ªõc button lg
  };

  const iconSizes = {
    sm: "w-3 h-3",//k√≠ch th∆∞·ªõc icon sm
    md: "w-4 h-4",//k√≠ch th∆∞·ªõc icon md
    lg: "w-5 h-5"//k√≠ch th∆∞·ªõc icon lg
  };

  return (
    <div className="relative">
      <Button
        onClick={handleAddToCart}
        disabled={isAdding || loading || disabled}
        className={`${sizeClasses[size]} ${className}`}
        variant="default"
      >
        {isAdding || loading ? (
          <FaSpinner className={`${iconSizes[size]} mr-2 animate-spin`} />
        ) : (
          <FaShoppingCart className={`${iconSizes[size]} mr-2`} />
        )}
        {isAdding || loading ? "ƒêang th√™m..." : "Th√™m v√†o gi·ªè"}
      </Button>
      
      {/* Badge hi·ªÉn th·ªã s·ªë l∆∞·ª£ng gi·ªè h√†ng */}
      {showBadge && cartCount > 0 && (
        <Badge 
          variant="destructive" 
          className="absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center text-xs font-bold"
        >
          {cartCount > 99 ? "99+" : cartCount}
        </Badge>
      )}
    </div>
  );
}

/**
 * üõí CART ICON BUTTON (Ch·ªâ icon, d√πng cho header)
 */
export function CartIconButton({ className = "" }) {
  const { loading } = useCartStore();//k·∫øt n·ªëi v·ªõi store ƒë·ªÉ l·∫•y h√†m loading
  const cartCount = useCartStore((state) => state.totalQuantity);//s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  
  // Debug logs
  console.log('üõí CartIconButton - cartCount:', cartCount);
  console.log('üõí CartIconButton - cartCount > 0:', cartCount > 0);

  return (
    <div className="relative">
      <Button
        variant="ghost"
        size="icon"
        className={`h-10 w-10 ${className}`}
        disabled={loading}
      >
        <FaShoppingCart className="h-5 w-5" />
      </Button>
      
      {/* Badge s·ªë l∆∞·ª£ng */}
      {cartCount > 0 && (
        <Badge 
          variant="destructive" 
          className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center text-xs font-bold"
        >
          {cartCount > 99 ? "99+" : cartCount}
        </Badge>
      )}
    </div>
  );
}
