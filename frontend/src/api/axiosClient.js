// c·∫•u h√¨nh axios client ƒë·ªÉ s·ª≠ d·ª•ng trong to√†n b·ªô ·ª©ng d·ª•ng
import axios from "axios";

// Hardcode API URL - kh√¥ng s·ª≠ d·ª•ng environment variables
// ‚úÖ L·∫•y API URL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng Vite (ho·∫∑c fallback v·ªÅ localhost n·∫øu ch·∫°y dev)
const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000/api/";

const axiosClient = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
    withCredentials: true, // üîπ quan tr·ªçng: cho ph√©p g·ª≠i cookie / credential

});

//Th√™m token t·ª± ƒë·ªông n·∫øu c√≥,l√† c∆° ch·∫ø t·ª± ƒë·ªông g·∫Øn token v√†o t·∫•t c·∫£ request g·ª≠i ƒë·∫øn API.
//Interceptor ch·ªâ c√≥ nhi·ªám v·ª• ƒë·ªçc token ƒë√£ l∆∞u khi g·ª≠i request.
//N·∫øu b·ªè ƒëo·∫°n l∆∞u token trong Login.jsx, th√¨ interceptor s·∫Ω kh√¥ng t√¨m th·∫•y token ƒë·ªÉ g·∫Øn v√†o request
//‚Üí c√°c API y√™u c·∫ßu ƒëƒÉng nh·∫≠p s·∫Ω b√°o 401 Unauthorized.
axiosClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Interceptor ƒë·ªÉ x·ª≠ l√Ω response l·ªói
axiosClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      
      // Redirect v·ªÅ trang login
      if (window.location.pathname.startsWith('/admin')) {
        window.location.href = '/auth';
      } else {
        window.location.href = '/auth';
      }
    }
    return Promise.reject(error);
  }
);

// T·∫°o axios client ri√™ng cho API public (kh√¥ng c·∫ßn token)
export const publicAxiosClient = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
    withCredentials: true, // üîπ quan tr·ªçng: cho ph√©p g·ª≠i cookie / credential

});

export default axiosClient;