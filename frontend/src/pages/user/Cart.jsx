import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { FaShoppingCart, FaTrash, FaPlus, FaMinus } from "react-icons/fa";
import useCartStore from "@/stores/cartStore";
import BreadcrumbNav from "@/components/user/BreadcrumbNav";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Checkbox } from "@/components/ui/checkbox";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { formatPrice } from "@/lib/utils";

/**
 * üõí CART PAGE COMPONENT - TRANG GI·ªé H√ÄNG VI·∫æT T4
 */

export default function Cart() {
  const { 
    items: cartItems, //danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng t·ª´ cartStore.js
    totalQuantity: cartCount, //s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng t·ª´ store cartStore.js
    loading, //tr·∫°ng th√°i loading t·ª´ store cartStore.js
    fetchCart, //h√†m l·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng t·ª´ store cartStore.js
    updateCartItem, //h√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng t·ª´ store cartStore.js
    removeFromCart, //h√†m x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng t·ª´ store cartStore.js
    clearCart //h√†m x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng t·ª´ store cartStore.js
  } = useCartStore();
  
  const navigate = useNavigate(); // React Router hook ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
  const [updatingItems, setUpdatingItems] = useState(new Set()); // Set c√°c item IDs ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t
  const [selectedItems, setSelectedItems] = useState(new Set()); // Set c√°c item IDs ƒë√£ ƒë∆∞·ª£c ch·ªçn b·∫±ng checkbox

  // Fetch gi·ªè h√†ng khi component mount
  useEffect(() => {
    fetchCart(); //g·ªçi h√†m fetchCart t·ª´ cartStore.js ƒë·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng
  }, []);

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  const handleUpdateQuantity = async (cartItemId, newQuantity) => {
    if (newQuantity < 1) return; // Kh√¥ng cho ph√©p s·ªë l∆∞·ª£ng < 1
    setUpdatingItems(prev => new Set(prev).add(cartItemId)); // th√™m cartItemId v√†o danh s√°ch "ƒëang c·∫≠p nh·∫≠t"
    try {
      await updateCartItem({ cartItemId, quantity: newQuantity }); //g·ªçi h√†m updateCartItem t·ª´ cartStore.js ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
    } finally {
      setUpdatingItems(prev => new Set([...prev].filter(id => id !== cartItemId))); //x√≥a cartItemId kh·ªèi danh s√°ch "ƒëang c·∫≠p nh·∫≠t"
    }
  };

  // X√≥a m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const handleRemoveItem = async (cartItemId) => {
    await removeFromCart(cartItemId); // G·ªçi API x√≥a
  };

  // X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const handleClearAll = async () => {
    await clearCart(); // G·ªçi API x√≥a t·∫•t c·∫£
  };

  // Ch·ªçn/b·ªè ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m
  const handleSelectAll = (checked) => {
    setSelectedItems(checked ? new Set(cartItems.map(item => item.id)) : new Set()); //n·∫øu checked = true th√¨ th√™m t·∫•t c·∫£ item IDs v√†o selectedItems, n·∫øu checked = false th√¨ x√≥a t·∫•t c·∫£ IDs kh·ªèi selectedItems (Set r·ªóng)
  };

  // Ch·ªçn/b·ªè ch·ªçn m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ
  const handleSelectItem = (itemId, checked) => {
    const newSelectedItems = new Set(selectedItems); // T·∫°o b·∫£n sao
    if (checked) newSelectedItems.add(itemId); // Th√™m v√†o Set
    else newSelectedItems.delete(itemId); // X√≥a kh·ªèi Set
    setSelectedItems(newSelectedItems); // C·∫≠p nh·∫≠t state
  };

  // X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ch·ªçn
  const handleDeleteSelected = async () => {
    for (const itemId of selectedItems) { // L·∫∑p qua c√°c item ƒë√£ ch·ªçn
      await removeFromCart(itemId); // X√≥a t·ª´ng item
    }
    setSelectedItems(new Set()); // X√≥a t·∫•t c·∫£ selection
  };

  // T√≠nh t·ªïng ti·ªÅn c·ªßa c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
  const getSelectedTotalAmount = () => {
    return cartItems
      .filter(item => selectedItems.has(item.id)) // Ch·ªâ l·∫•y item ƒë√£ ch·ªçn
      .reduce((total, item) => total + (item.finalPrice * item.quantity), 0); // T√≠nh t·ªïng ti·ªÅn
  };

  // ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m ƒë√£ ch·ªçn
  const getSelectedCount = () => {
    return cartItems
      .filter(item => selectedItems.has(item.id)) // Ch·ªâ l·∫•y item ƒë√£ ch·ªçn
      .length; // ƒê·∫øm s·ªë lo·∫°i s·∫£n ph·∫©m ƒë√£ ch·ªçn, kh√¥ng ph·∫£i t·ªïng quantity
  };

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <BreadcrumbNav />
        <div className="mt-6 space-y-4">
          {[1, 2, 3].map((i) => (
            <div key={i} className="bg-white p-4 rounded-lg">
              <div className="flex gap-4">
                <Skeleton className="h-20 w-20 rounded-lg" />
                <div className="flex-1 space-y-2">
                  <Skeleton className="h-6 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
                <Skeleton className="h-8 w-24" />
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  // Empty cart state
  if (cartCount === 0) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <BreadcrumbNav />
        <div className="flex flex-col items-center justify-center min-h-[60vh] text-center">
          <FaShoppingCart className="h-16 w-16 text-gray-400 mb-4" />
          <h1 className="text-2xl font-bold mb-4">Gi·ªè h√†ng tr·ªëng</h1>
          <Button onClick={() => navigate("/san-pham")} className="bg-blue-600 hover:bg-blue-700">
            Mua s·∫Øm ngay
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <BreadcrumbNav />
      
      {/* Header v·ªõi checkbox ch·ªçn t·∫•t c·∫£ */}
      <div className="mt-6 bg-white rounded-lg shadow-lg border p-4 mb-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Checkbox
              checked={selectedItems.size === cartItems.length}
              onCheckedChange={handleSelectAll}
              className="cursor-pointer"
            />
            <span className="font-semibold ">Ch·ªçn t·∫•t c·∫£ ({cartCount} s·∫£n ph·∫©m)</span>
          </div>
          
          <div className="flex gap-3">
            {selectedItems.size > 0 && (
              <Button variant="outline" size="sm" onClick={handleDeleteSelected} className="text-red-600 cursor-pointer">
                <FaTrash className="mr-2 h-3 w-3" />
                X√≥a ({selectedItems.size})
              </Button>
            )}
            <Button variant="outline" size="sm" onClick={handleClearAll} className="text-gray-600 cursor-pointer">
              <FaTrash className="mr-2 h-3 w-3" />
              X√≥a t·∫•t c·∫£
            </Button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Cart Items Table */}
        <div className="lg:col-span-3">
          <div className="bg-white rounded-lg shadow border overflow-hidden">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[50px] text-center ">Ch·ªçn</TableHead>
                  <TableHead>S·∫£n ph·∫©m</TableHead>
                  <TableHead className="text-center w-[100px]">M√†u s·∫Øc</TableHead>
                  <TableHead className="text-center w-[100px]">K√≠ch th∆∞·ªõc</TableHead>
                  <TableHead className="text-center">ƒê∆°n gi√°</TableHead>
                  <TableHead className="text-center">S·ªë l∆∞·ª£ng</TableHead>
                  <TableHead className="text-center">Th√†nh ti·ªÅn</TableHead>
                  <TableHead className="w-[80px] text-center">Thao t√°c</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {cartItems.map((item) => (
                  <TableRow key={item.id} className="hover:bg-gray-50">
                    {/* Checkbox */}
                    <TableCell className="text-center">
                      <Checkbox
                        checked={selectedItems.has(item.id)}
                        onCheckedChange={(checked) => handleSelectItem(item.id, checked)}
                      />
                    </TableCell>
                    
                    {/* Product Info */}
                    <TableCell>
                      <div className="flex gap-3">
                        <img
                          src={item.product.primaryImage || item.product.imageUrl || "/placeholder-product.jpg"}
                          alt={item.product.name}
                          className="h-16 w-16 object-cover rounded border"
                        />
                        <div className="flex-1">
                          <h3 className="font-semibold text-sm">{item.product.name}</h3>
                        </div>
                      </div>
                    </TableCell>
                    
                    {/* Color */}
                    <TableCell className="text-center">
                      {(item.variant?.color || item.productVariant?.color) ? (
                        <span className="text-xs bg-blue-100 px-2 py-1 rounded text-blue-800 font-medium">
                          {item.variant?.color || item.productVariant?.color}
                        </span>
                      ) : (
                        <span className="text-xs text-gray-400">-</span>
                      )}
                    </TableCell>
                    
                    {/* Size */}
                    <TableCell className="text-center">
                      {(item.variant?.size || item.productVariant?.size) ? (
                        <span className="text-xs bg-green-100 px-2 py-1 rounded text-green-800 font-medium">
                          {item.variant?.size || item.productVariant?.size}
                        </span>
                      ) : (
                        <span className="text-xs text-gray-400">-</span>
                      )}
                    </TableCell>
                    
                    {/* Unit Price */}
                    <TableCell className="text-center">
                      <p className="font-semibold text-sm">{formatPrice(item.finalPrice)}</p>
                      {item.salePrice && item.salePrice !== item.unitPrice && (
                        <p className="text-xs text-gray-500 line-through">{formatPrice(item.unitPrice)}</p>
                      )}
                    </TableCell>
                    
                    {/* Quantity Controls */}
                    <TableCell>
                      <div className="flex items-center justify-center gap-2">
                        <Button
                          variant="outline"
                          size="icon"
                          className="h-7 w-7"
                          onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                          disabled={updatingItems.has(item.id) || item.quantity <= 1}
                        >
                          <FaMinus className="h-3 w-3" />
                        </Button>
                        
                        <span className="min-w-[2rem] text-center font-medium text-sm">
                          {updatingItems.has(item.id) ? <Skeleton className="h-5 w-5 mx-auto" /> : item.quantity}
                        </span>
                        
                        <Button
                          variant="outline"
                          size="icon"
                          className="h-7 w-7 cursor-pointer"
                          onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                          disabled={updatingItems.has(item.id)}
                        >
                          <FaPlus className="h-3 w-3" />
                        </Button>
                      </div>
                    </TableCell>
                    
                    {/* Total Amount */}
                    <TableCell className="text-center">
                      <p className="font-bold text-red-600 text-sm">{formatPrice(item.finalPrice * item.quantity)}</p>
                    </TableCell>
                    
                    {/* Actions */}
                    <TableCell className="text-center">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleRemoveItem(item.id)}
                        className="text-red-600 hover:text-red-700 h-7 w-7 p-0 cursor-pointer"
                      >
                        <FaTrash className="h-3 w-3" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
        
        {/* Order Summary */}
        <div className="lg:col-span-1">
          <div className="sticky top-4 bg-white rounded-lg shadow border p-4">
            <h3 className="text-lg font-bold mb-4">T√≥m t·∫Øt ƒë∆°n h√†ng</h3>
            
            <div className="space-y-3 mb-4">
              <div className="flex justify-between">
                <span>T·∫°m t√≠nh ({getSelectedCount()} s·∫£n ph·∫©m):</span>
                <span className="font-semibold">{formatPrice(getSelectedTotalAmount())}</span>
              </div>
              
              <div className="flex justify-between">
                <span>Ph√≠ v·∫≠n chuy·ªÉn:</span>
                <span className="font-semibold text-green-600">Mi·ªÖn ph√≠</span>
              </div>
              
              <div className="border-t pt-3">
                <div className="flex justify-between text-lg font-bold">
                  <span>T·ªïng c·ªông:</span>
                  <span className="text-red-600">{formatPrice(getSelectedTotalAmount())}</span>
                </div>
              </div>
            </div>
            
            <Button 
              onClick={() => navigate("/checkout")}
              className="w-full bg-orange-500 hover:bg-orange-600 text-white py-3 rounded-lg font-semibold mb-3 cursor-pointer"
              disabled={selectedItems.size === 0}
            >
              Mua h√†ng ({selectedItems.size})
            </Button>
            
            <Button 
              variant="outline"
              onClick={() => navigate("/san-pham")}
              className="w-full py-3 rounded-lg cursor-pointer"
            >
              Ti·∫øp t·ª•c mua s·∫Øm
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}