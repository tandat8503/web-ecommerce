
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  avatarPublicId: 'avatarPublicId',
  googleId: 'googleId',
  isActive: 'isActive',
  isVerified: 'isVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OtpVerificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  otpCode: 'otpCode',
  type: 'type',
  isUsed: 'isUsed',
  expiresAt: 'expiresAt',
  attempts: 'attempts',
  maxAttempts: 'maxAttempts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fullName: 'fullName',
  phone: 'phone',
  streetAddress: 'streetAddress',
  ward: 'ward',
  district: 'district',
  city: 'city',
  postalCode: 'postalCode',
  addressType: 'addressType',
  isDefault: 'isDefault',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  country: 'country',
  logoUrl: 'logoUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  slug: 'slug',
  description: 'description',
  categoryId: 'categoryId',
  brandId: 'brandId',
  status: 'status',
  isFeatured: 'isFeatured',
  price: 'price',
  salePrice: 'salePrice',
  costPrice: 'costPrice',
  stockQuantity: 'stockQuantity',
  minStockLevel: 'minStockLevel',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  viewCount: 'viewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductSpecificationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  specName: 'specName',
  specValue: 'specValue',
  specUnit: 'specUnit',
  displayName: 'displayName',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  isPrimary: 'isPrimary',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  sku: 'sku',
  name: 'name',
  price: 'price',
  stockQuantity: 'stockQuantity',
  isActive: 'isActive',
  size: 'size',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShoppingCartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  variantId: 'variantId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  createdAt: 'createdAt'
};

exports.Prisma.ProductCommentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  parentId: 'parentId',
  content: 'content',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  orderId: 'orderId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isApproved: 'isApproved',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  userId: 'userId',
  status: 'status',
  paymentStatus: 'paymentStatus',
  subtotal: 'subtotal',
  shippingFee: 'shippingFee',
  discountAmount: 'discountAmount',
  totalAmount: 'totalAmount',
  shippingAddress: 'shippingAddress',
  paymentMethod: 'paymentMethod',
  paymentReference: 'paymentReference',
  trackingCode: 'trackingCode',
  customerNote: 'customerNote',
  adminNote: 'adminNote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  productName: 'productName',
  productSku: 'productSku',
  variantName: 'variantName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  discountType: 'discountType',
  discountValue: 'discountValue',
  minimumAmount: 'minimumAmount',
  usageLimit: 'usageLimit',
  usedCount: 'usedCount',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CouponUsageScalarFieldEnum = {
  id: 'id',
  couponId: 'couponId',
  userId: 'userId',
  orderId: 'orderId',
  usedAt: 'usedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  amount: 'amount',
  transactionId: 'transactionId',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imageUrl: 'imageUrl',
  bannerPublicId: 'bannerPublicId',
  linkUrl: 'linkUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  keyName: 'keyName',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  loginMethod: 'loginMethod',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isSuccessful: 'isSuccessful',
  failureReason: 'failureReason',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  refreshToken: 'refreshToken',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.AdminUserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  avatar: 'avatar',
  avatarPublicId: 'avatarPublicId',
  googleId: 'googleId'
};

exports.Prisma.OtpVerificationOrderByRelevanceFieldEnum = {
  email: 'email',
  otpCode: 'otpCode'
};

exports.Prisma.PasswordResetOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  phone: 'phone',
  streetAddress: 'streetAddress',
  ward: 'ward',
  district: 'district',
  city: 'city',
  postalCode: 'postalCode',
  note: 'note'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl'
};

exports.Prisma.BrandOrderByRelevanceFieldEnum = {
  name: 'name',
  country: 'country',
  logoUrl: 'logoUrl'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  sku: 'sku',
  name: 'name',
  slug: 'slug',
  description: 'description',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription'
};

exports.Prisma.ProductSpecificationOrderByRelevanceFieldEnum = {
  specName: 'specName',
  specValue: 'specValue',
  specUnit: 'specUnit',
  displayName: 'displayName'
};

exports.Prisma.ProductImageOrderByRelevanceFieldEnum = {
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId'
};

exports.Prisma.ProductVariantOrderByRelevanceFieldEnum = {
  sku: 'sku',
  name: 'name',
  size: 'size',
  color: 'color'
};

exports.Prisma.ProductCommentOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.ProductReviewOrderByRelevanceFieldEnum = {
  title: 'title',
  comment: 'comment'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  orderNumber: 'orderNumber',
  paymentReference: 'paymentReference',
  trackingCode: 'trackingCode',
  customerNote: 'customerNote',
  adminNote: 'adminNote'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  productName: 'productName',
  productSku: 'productSku',
  variantName: 'variantName'
};

exports.Prisma.CouponOrderByRelevanceFieldEnum = {
  code: 'code',
  name: 'name'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  transactionId: 'transactionId'
};

exports.Prisma.BannerOrderByRelevanceFieldEnum = {
  title: 'title',
  imageUrl: 'imageUrl',
  bannerPublicId: 'bannerPublicId',
  linkUrl: 'linkUrl'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  type: 'type'
};

exports.Prisma.SettingOrderByRelevanceFieldEnum = {
  keyName: 'keyName',
  value: 'value',
  description: 'description'
};

exports.Prisma.LoginHistoryOrderByRelevanceFieldEnum = {
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  failureReason: 'failureReason'
};

exports.Prisma.UserSessionOrderByRelevanceFieldEnum = {
  sessionToken: 'sessionToken',
  refreshToken: 'refreshToken',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF'
};

exports.OtpType = exports.$Enums.OtpType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.AddressType = exports.$Enums.AddressType = {
  HOME: 'HOME',
  OFFICE: 'OFFICE'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  OUT_OF_STOCK: 'OUT_OF_STOCK'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  COD: 'COD',
  MOMO: 'MOMO',
  VNPAY: 'VNPAY'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENT: 'PERCENT',
  AMOUNT: 'AMOUNT'
};

exports.LoginMethod = exports.$Enums.LoginMethod = {
  EMAIL_PASSWORD: 'EMAIL_PASSWORD',
  GOOGLE: 'GOOGLE'
};

exports.Prisma.ModelName = {
  AdminUser: 'AdminUser',
  User: 'User',
  OtpVerification: 'OtpVerification',
  PasswordReset: 'PasswordReset',
  Address: 'Address',
  Category: 'Category',
  Brand: 'Brand',
  Product: 'Product',
  ProductSpecification: 'ProductSpecification',
  ProductImage: 'ProductImage',
  ProductVariant: 'ProductVariant',
  ShoppingCart: 'ShoppingCart',
  Wishlist: 'Wishlist',
  ProductComment: 'ProductComment',
  ProductReview: 'ProductReview',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Coupon: 'Coupon',
  CouponUsage: 'CouponUsage',
  Payment: 'Payment',
  Banner: 'Banner',
  Notification: 'Notification',
  Setting: 'Setting',
  LoginHistory: 'LoginHistory',
  UserSession: 'UserSession'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
